/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package airportSimulation;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.Timer;
/**
 *
 * @author 349737163
 */
public class DrawingArea extends javax.swing.JPanel {
    //plane images
    Image landingImage = Toolkit.getDefaultToolkit().getImage("planeLanding.png");
    Image takeoffImage = Toolkit.getDefaultToolkit().getImage("planeTakeoff.png");
    //starting positions for plane animation
    static int takeOffX=350;
    static int takeOffY=100;
    static int landingX=10; 
    static int landingY=0;
    static char typeFlight;
    /**
     * Creates new form DrawingArea
     */
    public DrawingArea() {
        initComponents();
    }


    
     public void paintComponent(Graphics g){
       super.paintComponent(g);
       if(MainFrame.startProgram ){ //if the program has started
        if(typeFlight=='l' && MainFrame.countdown>=0){ //if a plane is landing and 4 timer units have passed
            //draw the plane
            g.drawImage(landingImage,landingX,landingY, 50,50,this);
        }else if (typeFlight=='t'&&MainFrame.countdown>=0){ 
            //if a plane is taking off and at least 2 timer units have passed
            //draw the plane
            g.drawImage(takeoffImage,takeOffX,takeOffY,50,50,this);
        }else{
            //don't draw anything if no planes are at the airport
        }
        }
       
    }
    
   public static void resetTakeoff(){
       //reset starting position for takeoff
       takeOffX=350;
       takeOffY=100;
   }
   
   public static void resetLanding(){
       //reset starting position for landing
       landingX=10;
       landingY=0;
   }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
